'''========== Введение в функции.  Позиционные и именнованные args kwargs аргументы с default. Аннотации ========='''

# def sum_range():
#     sum_ = 0
#     for i in range(1, 10):
#         # print(i)
#         sum_+=i

#     print(sum_)

# sum_range()
# sum_range()
# sum_range()


# Аннотация -> помогает сделать код информативным и иизбавиться от некоторых проблем. Позволяет добавить подсказки в функциях. С их помощью можно предупредить какой тип данных должен быть использован (если передать другой тип данных ошибки не будет)

# num: int = 9
# num = 'hello' 

def two_sum(x: int, y: int):
    if type(x) == type(y):
        print(x+y)
    else:
        print('не совместимые типы данных')

# two_sum(8, 99)
# two_sum('str', 'str2')
# two_sum([1, 2, 3], [4, 5, 6])
# two_sum('str', 1)
# two_sum('sss', 'ddd')
# two_sum()

'''========== Функция ==========='''
# именованный блок кода, который выполняет одну задачу и может принимать аргументы и возвращать результат. Их можно использовать многократно, вызывая по имени

# ключевое слово def -> указывает питону, что мы хотим создать функцию (название фукции -> по сути является переменной, под этим названием питон запоминает нашу функцию) (скобки нужны, чтобы передавать параметры -> это переменные для какой-либо информации)


'''Синтаксис'''
# def <название функции>(параметры):
    # тело функции

'''сама функция -> это инструкция, чтобы она заработала ее нужно вызвать -> для вызова функции необходимо указать ее название и поставить скобки, при необходимости передать аргументы'''

# <название функции>(агрументы)


# def sum_(x: int, y: int) -> None:
#     print(x+ y)

# def sum_(x: int, y: int) -> int:
#     print(x+y)
#     return (x + y)

# result = sum_(4, 55)
# print(result + 99)

# a = print(100)
# print(a)


''' return '''
# это ключевое слово, которое дает понять Python что за этой командой будет какая-то информация, которая является окончательным продуктом работы нашей функции и на этом функция завершает свою работу (возвращает результат)

# def func1():
#     return 'Makers'
#     print(10+15) # никогда не заработает

# func1()


'''========= Виды параметров =========='''
# 1. обязательные (a, x, y, name) -> определяют, какие аргументы нужно передать в функцию обязательно (в функцию нужно обязательно передавать столько же аргументов, сколько параметров)
# 2. не обязательные (опциональными)
# 2.1 c дефолтом (есть значение по умолчанию x=10)
# 2.2 args -> принимает не именоваанные аргументы (все позиционные аргументы, которые не попали в обязательные и дефолтом) tuple, с дополнительными аргументами

# 2.3 kwargs -> принимает все дополнительные именованные аргумент (dict)


''' =========== Виды аргументов ============ '''
# 1. позиционные -> по позиции

# функция принимает аргументы по очереди -> если передать просто аргументы ('John', 'Snow') первый аогумент относится к первому параметру, второй ко второму  (порядок передачи аргументов имеет значение)

# 2. именованные -> по названию (параметр=значение)

# чтобы передать аргументы в опрделенные параметры, используем именованные аргументы (задаем конкретным параметрам значения (аргументы))
# (last_name='Snow', name='John')
# порядок не имеет значения



# def f(a, b,  *args, **kwargs):
#     print(a+b)
#     print(args)
#     print(kwargs)

# f(3, 4, 6, 7, 8, 9, c=9, n=7, i=99)

# f(b=8, a=9)


def sum_(a: int, b: int): # обязательные параметры
    return a + b

# print(sum_(5, 6)) # позиционные аргументы

def sum_(a: int, b=34): # дефолтный параметр
    return a + b

# print(sum_(5)) # позиционные аргументы
# print(sum_(a=6)) # именованный аргумент

# print(sum_(b=9, a=6))

# print(sum_(6, 7)) # позиционные аргументы, перезаписываем значения дефолтного параметра


'''========= Распаковка ========='''
# ls = [*range(1, 11)] # распаковываем последовательность в список
# print(ls[-1])
dict_ = {'a': 1, 'b': 2}

# a, v, b = (1, 5, 8)

# list_ = [*dict_] # распаковываем словарь и получаем только ключи
# dict2_ = {**dict_} # распаковываем словарь в новый словарь
# print(list_)

# print(id(dict2_), id(dict_))


def sum_(a: int, b=34, *ar, **kw): # дефолтный параметр
    # print(b)
    return a + b + sum(ar) + sum(kw.values())

# print(sum_(5, 6))


def func(a, b=4, *args, **kwargs):
    print('a', a)
    print('b', b)
    print('args', args)
    print('kwargs', kwargs)

# func(5)
# func(5, 7, 8, 'hello', 12)
# func(5, c=7, d=8, e='hello', f=12)

# func(5, c=7, d=8, e='hello', f=12, a=27) # ошибка, в параметр a передаем несколько аргументов

# func(b=88, a=0)

# func(a=7, b=9, 3, 4, 5) # ошибка, позиционные аргументы всегда должны быть вначале

